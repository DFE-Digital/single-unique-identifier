// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace System.E2ETests.Feature
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class EducationRecordDataIsAvailableToSocialCarePractitionersFeature : object, global::Xunit.IClassFixture<EducationRecordDataIsAvailableToSocialCarePractitionersFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Feature", "Education record data is available to social care practitioners", "  As a social care practitioner\n  I want to see the record for a child who has jo" +
                "ined a new school\n  So that I am more informed in my work with the child", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "education.feature"
#line hidden
        
        public EducationRecordDataIsAvailableToSocialCarePractitionersFeature(EducationRecordDataIsAvailableToSocialCarePractitionersFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
  #line hidden
#line 8
    await testRunner.GivenAsync("\'Bassingbourn Primary\' school exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("\'Jenny\' exists with role \'SocialWorker\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("\'South Cambridgeshire DC\' local authority exists", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        private static global::Io.Cucumber.Messages.Types.Source SourceFunc()
        {
            return new global::Io.Cucumber.Messages.Types.Source("Feature/education.feature", @"Feature: Education record data is available to social care practitioners
  
  As a social care practitioner
  I want to see the record for a child who has joined a new school
  So that I am more informed in my work with the child
  
  Background: 
    Given 'Bassingbourn Primary' school exists
    And 'Jenny' exists with role 'SocialWorker'
    And 'South Cambridgeshire DC' local authority exists

  Scenario Outline: A social worker is interested in a child that has joined a new school
    Given there was an enrollment for <child> at <school_name>
    And <child> has NHS number <nhs_no>
    And <school_name> is in the single view cohort for <la_name>
    When <social_care_user> views the record for <child> at <la_name>
    Then <child> education record shows that he has been enrolled at <school_name>

    Examples:
      | child | school_name          | nhs_no     | la_name                 | social_care_user |
      | Timmy | Bassingbourn Primary | 1234567890 | South Cambridgeshire DC | Jenny            |
", global::Io.Cucumber.Messages.Types.SourceMediaType.TEXT_X_CUCUMBER_GHERKIN_PLAIN);
        }
        
        private static global::Io.Cucumber.Messages.Types.GherkinDocument GherkinDocumentFunc()
        {
            return new global::Io.Cucumber.Messages.Types.GherkinDocument("Feature/education.feature", new global::Io.Cucumber.Messages.Types.Feature(new global::Io.Cucumber.Messages.Types.Location(1, new System.Nullable<long>(1)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "en-US", "Feature", "Education record data is available to social care practitioners", "  As a social care practitioner\n  I want to see the record for a child who has jo" +
                        "ined a new school\n  So that I am more informed in my work with the child", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.FeatureChild>(new global::Io.Cucumber.Messages.Types.FeatureChild[] {
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, new global::Io.Cucumber.Messages.Types.Background(new global::Io.Cucumber.Messages.Types.Location(7, new System.Nullable<long>(3)), "Background", "", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(8, new System.Nullable<long>(5)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "\'Bassingbourn Primary\' school exists", null, null, "0a7e2306f6760b5cacbed6cd3c2f8028"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(9, new System.Nullable<long>(5)), "And ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONJUNCTION, "\'Jenny\' exists with role \'SocialWorker\'", null, null, "7e54d6513261b655adb72277d3c7c3d7"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(10, new System.Nullable<long>(5)), "And ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONJUNCTION, "\'South Cambridgeshire DC\' local authority exists", null, null, "8fad48c20c1ade5bbca0d00eac7a8bce")}), "6aff6fb5f605e657a3519443f3ed0ea3"), null),
                                new global::Io.Cucumber.Messages.Types.FeatureChild(null, null, new global::Io.Cucumber.Messages.Types.Scenario(new global::Io.Cucumber.Messages.Types.Location(12, new System.Nullable<long>(3)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Scenario Outline", "A social worker is interested in a child that has joined a new school", "", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Step>(new global::Io.Cucumber.Messages.Types.Step[] {
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(13, new System.Nullable<long>(5)), "Given ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONTEXT, "there was an enrollment for <child> at <school_name>", null, null, "3eab3bf72d6e865d922bc4466741125d"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(14, new System.Nullable<long>(5)), "And ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONJUNCTION, "<child> has NHS number <nhs_no>", null, null, "72e73b0b67c34757bfff56a01513acbb"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(15, new System.Nullable<long>(5)), "And ", global::Io.Cucumber.Messages.Types.StepKeywordType.CONJUNCTION, "<school_name> is in the single view cohort for <la_name>", null, null, "b2f96254b491215ea8568963dd2d9e0e"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(16, new System.Nullable<long>(5)), "When ", global::Io.Cucumber.Messages.Types.StepKeywordType.ACTION, "<social_care_user> views the record for <child> at <la_name>", null, null, "e8b0ff85f8552c5eaaadf457dc992975"),
                                                    new global::Io.Cucumber.Messages.Types.Step(new global::Io.Cucumber.Messages.Types.Location(17, new System.Nullable<long>(5)), "Then ", global::Io.Cucumber.Messages.Types.StepKeywordType.OUTCOME, "<child> education record shows that he has been enrolled at <school_name>", null, null, "51f62203a2cd415d8be930c4b50583d8")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Examples>(new global::Io.Cucumber.Messages.Types.Examples[] {
                                                    new global::Io.Cucumber.Messages.Types.Examples(new global::Io.Cucumber.Messages.Types.Location(19, new System.Nullable<long>(5)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Tag>(new global::Io.Cucumber.Messages.Types.Tag[0]), "Examples", "", "", new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(20, new System.Nullable<long>(7)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(20, new System.Nullable<long>(9)), "child"),
                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(20, new System.Nullable<long>(17)), "school_name"),
                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(20, new System.Nullable<long>(40)), "nhs_no"),
                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(20, new System.Nullable<long>(53)), "la_name"),
                                                                        new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(20, new System.Nullable<long>(79)), "social_care_user")}), "859356da077eaf5b995c8a4888da71a7"), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableRow>(new global::Io.Cucumber.Messages.Types.TableRow[] {
                                                                    new global::Io.Cucumber.Messages.Types.TableRow(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(7)), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.TableCell>(new global::Io.Cucumber.Messages.Types.TableCell[] {
                                                                                    new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(9)), "Timmy"),
                                                                                    new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(17)), "Bassingbourn Primary"),
                                                                                    new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(40)), "1234567890"),
                                                                                    new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(53)), "South Cambridgeshire DC"),
                                                                                    new global::Io.Cucumber.Messages.Types.TableCell(new global::Io.Cucumber.Messages.Types.Location(21, new System.Nullable<long>(79)), "Jenny")}), "eba6fc9ebac8d75ba141ca50f6b89ceb")}), "ea64329472c54656bdb841c0cea52b3a")}), "f27c9cfc8fa42e5680c1609a997286e0"))})), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Comment>(new global::Io.Cucumber.Messages.Types.Comment[0]));
        }
        
        private static global::System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle> PicklesFunc()
        {
            return new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.Pickle>(new global::Io.Cucumber.Messages.Types.Pickle[] {
                        new global::Io.Cucumber.Messages.Types.Pickle("87e50f7cbeeac750b3e864481d2f289c", "Feature/education.feature", "A social worker is interested in a child that has joined a new school", "en-US", new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleStep>(new global::Io.Cucumber.Messages.Types.PickleStep[] {
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "0a7e2306f6760b5cacbed6cd3c2f8028"}), "d416b0a80e62e655a0218f70c228494f", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "\'Bassingbourn Primary\' school exists"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "7e54d6513261b655adb72277d3c7c3d7"}), "b6c876fd79364f589727858e64f24260", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "\'Jenny\' exists with role \'SocialWorker\'"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "8fad48c20c1ade5bbca0d00eac7a8bce"}), "67448a9527cf5456831bbc1cf4be47fa", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "\'South Cambridgeshire DC\' local authority exists"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "3eab3bf72d6e865d922bc4466741125d",
                                                        "eba6fc9ebac8d75ba141ca50f6b89ceb"}), "c78755cdd2575b5fbb4ddb2e3b0e2dcc", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "there was an enrollment for Timmy at Bassingbourn Primary"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "72e73b0b67c34757bfff56a01513acbb",
                                                        "eba6fc9ebac8d75ba141ca50f6b89ceb"}), "7c0da1e9d7b3d454b8d251d92e1a0105", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "Timmy has NHS number 1234567890"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "b2f96254b491215ea8568963dd2d9e0e",
                                                        "eba6fc9ebac8d75ba141ca50f6b89ceb"}), "a558ca3e62fe6c5d8481a1cf0df289ec", global::Io.Cucumber.Messages.Types.PickleStepType.CONTEXT, "Bassingbourn Primary is in the single view cohort for South Cambridgeshire DC"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "e8b0ff85f8552c5eaaadf457dc992975",
                                                        "eba6fc9ebac8d75ba141ca50f6b89ceb"}), "43caf2bbfea5355db866442f8ad6e2f1", global::Io.Cucumber.Messages.Types.PickleStepType.ACTION, "Jenny views the record for Timmy at South Cambridgeshire DC"),
                                        new global::Io.Cucumber.Messages.Types.PickleStep(null, new System.Collections.Generic.List<string>(new string[] {
                                                        "51f62203a2cd415d8be930c4b50583d8",
                                                        "eba6fc9ebac8d75ba141ca50f6b89ceb"}), "d594e98f16ac215b94475f30a63658f4", global::Io.Cucumber.Messages.Types.PickleStepType.OUTCOME, "Timmy education record shows that he has been enrolled at Bassingbourn Primary")}), new System.Collections.Generic.List<global::Io.Cucumber.Messages.Types.PickleTag>(new global::Io.Cucumber.Messages.Types.PickleTag[0]), new System.Collections.Generic.List<string>(new string[] {
                                        "f27c9cfc8fa42e5680c1609a997286e0",
                                        "eba6fc9ebac8d75ba141ca50f6b89ceb"}))});
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages(new global::System.Func<Io.Cucumber.Messages.Types.Source>(EducationRecordDataIsAvailableToSocialCarePractitionersFeature.SourceFunc), new global::System.Func<Io.Cucumber.Messages.Types.GherkinDocument>(EducationRecordDataIsAvailableToSocialCarePractitionersFeature.GherkinDocumentFunc), new global::System.Func<System.Collections.Generic.IEnumerable<Io.Cucumber.Messages.Types.Pickle>>(EducationRecordDataIsAvailableToSocialCarePractitionersFeature.PicklesFunc));
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="A social worker is interested in a child that has joined a new school")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Education record data is available to social care practitioners")]
        [global::Xunit.TraitAttribute("Description", "A social worker is interested in a child that has joined a new school")]
        [global::Xunit.InlineDataAttribute("Timmy", "Bassingbourn Primary", "1234567890", "South Cambridgeshire DC", "Jenny", "0", new string[0])]
        public async global::System.Threading.Tasks.Task ASocialWorkerIsInterestedInAChildThatHasJoinedANewSchool(string child, string school_Name, string nhs_No, string la_Name, string social_Care_User, string @__pickleIndex, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("child", child);
            argumentsOfScenario.Add("school_name", school_Name);
            argumentsOfScenario.Add("nhs_no", nhs_No);
            argumentsOfScenario.Add("la_name", la_Name);
            argumentsOfScenario.Add("social_care_user", social_Care_User);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A social worker is interested in a child that has joined a new school", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 12
  this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await this.FeatureBackgroundAsync();
#line hidden
#line 13
    await testRunner.GivenAsync(string.Format("there was an enrollment for {0} at {1}", child, school_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.AndAsync(string.Format("{0} has NHS number {1}", child, nhs_No), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.AndAsync(string.Format("{0} is in the single view cohort for {1}", school_Name, la_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.WhenAsync(string.Format("{0} views the record for {1} at {2}", social_Care_User, child, la_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.ThenAsync(string.Format("{0} education record shows that he has been enrolled at {1}", child, school_Name), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await EducationRecordDataIsAvailableToSocialCarePractitionersFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await EducationRecordDataIsAvailableToSocialCarePractitionersFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
